import requests
from datetime import datetime, timedelta
from setup_all import _ # –í–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω, –±—É–¥–µ—Ç –æ–±–µ—Ä–Ω—É—Ç –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
from countries import countries_dict


code_to_smile = {
    'Clear': _('‚òÄÔ∏è –Ø—Å–Ω–æ ‚òÄÔ∏è'),
    'Clouds': _('‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è'),
    'Rain': _('üåß –î–æ–∂–¥—å üåß'),
    'Drizzle': _('‚õà –õ–∏–≤–µ–Ω—å ‚õà'),
    'Thunderstorm': _('üå© –ì—Ä–æ–∑–∞ üå©'),
    'Snow': _('‚ùÑÔ∏è –°–Ω–µ–≥ ‚ùÑÔ∏è'),
    'Mist': _('üå´ –¢—É–º–∞–Ω üå´')
} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ–≥–æ–¥—ã

weekdays = {
    'Sunday': _('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'),
    'Monday': _('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'),
    'Tuesday': _('–í—Ç–æ—Ä–Ω–∏–∫'),
    'Wednesday': _('–°—Ä–µ–¥–∞'),
    'Thursday': _('–ß–µ—Ç–≤–µ—Ä–≥'),
    'Friday': _('–ü—è—Ç–Ω–∏—Ü–∞'),
    'Saturday': _('–°—É–±–±–æ—Ç–∞')
} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏

degrees_dict = {
    'standart': 'K',
    'metric': '¬∞C',
    'imperial': '¬∞F'
} # –†–∞–∑–ª–∏—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã

speed_dict = {
    'standart': _('–º/—Å'),
    'metric': _('–º/—Å'),
    'imperial': _('–º–∏–ª—å/—á')
} # –†–∞–∑–ª–∏—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞

pressure_dict = {
    'standart': _('–≥–ü–∞'),
    'metric': _('–º–º —Ä—Ç —Å—Ç'),
    'imperial': _('–≥–ü–∞')
} # –†–∞–∑–ª–∏—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è


def wind_deg_to_dir(wind_deg: float):
    '''
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–¥–∞–µ—Ç —Å–∞–π—Ç –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞, –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
    '''
    
    dirs = (
    _('–° ‚¨ÜÔ∏è'), _('–°–°–í ‚ÜóÔ∏è'), _('–°–í ‚ÜóÔ∏è'), _('–í–°–í ‚ÜóÔ∏è'), _('–í ‚û°Ô∏è'), _('–í–Æ–í Ô∏è‚ÜòÔ∏è'), _('–Æ–í ‚ÜòÔ∏è'), _('–Æ–Æ–í ‚ÜòÔ∏è'), _('–Æ ‚¨áÔ∏è'),
    _('–Æ–Æ–ó ‚ÜôÔ∏è'), _('–Æ–ó ‚ÜôÔ∏è'), _('–ó–Æ–ó ‚ÜôÔ∏è'), _('–ó ‚¨ÖÔ∏è'), _('–ó–°–ó ‚ÜñÔ∏è'), _('–°–ó ‚ÜñÔ∏è'), _('–°–°–ó ‚ÜñÔ∏è'))
    index = round(wind_deg / 22.5) if round(wind_deg / 22.5) < len(dirs) else 0
    return dirs[index]


def get_weather_data(weather_json: dict, units: str = 'metric'):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—Ä–µ–º—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç. –¥.
    '''
    
    result = {}
    result['weather_time'] = datetime.fromtimestamp(weather_json['dt'])
    result['temperature'] = weather_json['main']['temp']

    wd = weather_json['weather'][0]['main']
    if wd in code_to_smile:
        result['description'] = code_to_smile[wd]
    else:
        result['description'] = _('üå´ –ú–≥–ª–∞ üå´')

    result['feels_like'] = weather_json['main']['feels_like']
    result['humidity'] = weather_json['main']['humidity']
    result['pressure'] = weather_json['main']['pressure'] * 0.75 if units == 'metric' else weather_json['main']['pressure']
    result['wind_speed'] = weather_json['wind']['speed']
    result['wind_direction'] = wind_deg_to_dir(weather_json['wind']['deg'])

    return result


def make_weather_request(url, units: str = 'metric'):
    '''
    –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    '''
    
    result = ''
    try:
        r = requests.get(url=url)
        data = r.json()

        city = data['name'] # –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–µ–º –≥–æ—Ä–æ–¥
        country_code = data['sys']['country'] # –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        country_emoji = ''
        if country_code in countries_dict:
            country_name = countries_dict[country_code][0]
            country_emoji = countries_dict[country_code][1]
            if country_name == city:
                country_name = ''
        else:
            country_name = country_code # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞

        coordinates = f"{float(data['coord']['lat']):.4f} {float(data['coord']['lon']):.4f}" # –ò–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

        time_shift = data['timezone']
        local_time = datetime.fromtimestamp(int(datetime.timestamp(datetime.utcnow())) + time_shift) # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è

        weather_data = get_weather_data(data, units=units)

        description = weather_data['description']
        temperature = weather_data['temperature']
        feels_like = weather_data['feels_like']
        humidity = weather_data['humidity']
        pressure = weather_data['pressure']
        wind_speed = weather_data['wind_speed']
        wind_direction = weather_data['wind_direction']

        sunrise_time = datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_time = datetime.fromtimestamp(data['sys']['sunset'])
        length_of_day = sunset_time - sunrise_time
        if sunrise_time.time() > sunset_time.time():
            sunrise_time, sunset_time = sunset_time - timedelta(days=1), sunrise_time # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ –∏ —Ä–∞—Å—Å–≤–µ—Ç–∞

        sunrise_formated = sunrise_time.strftime("%d.%m.%Y, %H:%M")
        if local_time < sunrise_time:
            time_to_sunrise = sunrise_time - local_time
            sunrise_formated = sunrise_formated + _('\n      (—á–µ—Ä–µ–∑ ') + str(time_to_sunrise) + ')'

        sunset_formated = sunset_time.strftime("%d.%m.%Y, %H:%M")
        if local_time < sunset_time:
            time_to_sunset = sunset_time - local_time
            sunset_formated = sunset_formated + _('\n       (—á–µ—Ä–µ–∑ ') + str(time_to_sunset) + ')' # –í—ã—á–∏—Å–ª—è–µ–º, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–≤–µ—Ç –∏ –∑–∞–∫–∞—Ç

        result = _('<b>üó∫ –ü–æ–≥–æ–¥–∞ –≤ ') + city + ', ' + _(country_name) + '\xa0' + country_emoji + ':</b>\n' \
                                                       '\n' + \
                 _('üï∞ –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: ') + local_time.strftime("%d.%m.%Y, %H:%M") + '\n' + \
                 _('üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <code>') + coordinates + '</code>\n' + \
                 _('üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ') + str(temperature) + ' ' + _(degrees_dict[units]) + ', ' + _(description) + '\n' + \
                 _('ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ') + str(feels_like) + ' ' + _(degrees_dict[units]) + '\n' + \
                 _('üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å ') + str(humidity) + ' %\n' + \
                 _('‚úàÔ∏èÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ ') + str(pressure) + ' ' + _(pressure_dict[units]) + '\n' + \
                 _('üí® –í–µ—Ç–µ—Ä ') + str(wind_speed) + ' ' +  _(speed_dict[units]) + ', ' + wind_direction + '\n' + \
                 _('üåÖ –†–∞—Å—Å–≤–µ—Ç ') + sunrise_formated + '\n' + \
                 _('üåÜ –ó–∞–∫–∞—Ç ') + sunset_formated + '\n' + \
                 _('üïì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è ') + str(length_of_day) + '\n' \
                                                                       '\n' + \
                 _('        üßö‚Äç‚ôÄÔ∏è     –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!     üßö‚Äç‚ôÇÔ∏è') # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as ex:
        print(ex)
        result = _('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!') # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    finally:
        return result


def make_forecast_request(url, forecast_annotation: str, step=1, end=40, day_night_emoji=False, units: str = 'metric'):
    '''
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
    –°–∞–π—Ç –æ—Ç–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 40 –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ 3 —á–∞—Å–∞ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏
    –ü–∞—Ä–∞–º–µ—Ç—Ä forecast_annotation –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ)
    –ü–∞—Ä–∞–º–µ—Ç—Ä step –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —à–∞–≥–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à–∞–≥—É –≤ 3 —á–∞—Å–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç step=1, –∞ —à–∞–≥—É –≤ 12 —á–∞—Å–æ–≤ - step=4)
    –ü–∞—Ä–∞–º–µ—Ç—Ä end –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ –∫–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 24 —á —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç end=8, –∞ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 5 –¥–Ω–µ–π - end=40)
    –ü–∞—Ä–∞–º–µ—Ç—Ä day_night_emoji –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—É–¥—É—Ç –ª–∏ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã —ç–º–æ–¥–∑–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –¥–µ–Ω—å/–Ω–æ—á—å
    '''
    
    result = ''
    try:
        r = requests.get(url=url)
        data = r.json()

        city = data['city']['name']
        country_code = data['city']['country']
        country_emoji = ''
        if country_code in countries_dict:
            country_name = countries_dict[country_code][0]
            country_emoji = countries_dict[country_code][1]
            if country_name == city:
                country_name = ''
        else:
            country_name = country_code

        result = _('<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ ') + city + ', ' + _(country_name) + '\xa0' + country_emoji + '</b>\n' + \
                 _('<b>–Ω–∞ ') + forecast_annotation + ':</b>\n' \ # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ, –Ω–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑
                                                     '\n' # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

        sunrise_time = datetime.fromtimestamp(data['city']['sunrise']).time()
        sunset_time = datetime.fromtimestamp(data['city']['sunset']).time()

        for i in range(0, end, step): # –ë–µ—Ä–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–≥–æ–º
            weather_data = get_weather_data(data['list'][i], units=units)

            weather_time = weather_data['weather_time']
            description = weather_data['description']
            temperature = weather_data['temperature']
            feels_like = weather_data['feels_like']
            humidity = weather_data['humidity']
            pressure = weather_data['pressure']
            wind_speed = weather_data['wind_speed']
            wind_direction = weather_data['wind_direction']

            is_day = sunrise_time < weather_time.time() < sunset_time # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–µ–Ω—å –∏–ª–∏ –Ω–æ—á—å, —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ –∏ —Ä–∞—Å—Å–≤–µ—Ç–∞

            result = result + '<i>' + _(weekdays[weather_time.strftime("%A")]) + ', ' + weather_time.strftime(
                "%d.%m.%Y, %H:%M") + '</i>'

            if day_night_emoji:
                if is_day:
                    result = result + ' üåû'
                else:
                    result = result + ' üåö' # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏

            result = result + _('<i>:</i>\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ') + str(temperature) + ' ' + _(degrees_dict[units]) + ', ' + _(description) + '\n' + \
                     _('ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ') + str(feels_like) + ' ' + _(degrees_dict[units]) + '\n' + \
                     _('üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å ') + str(humidity) + ' %\n' + \
                     _('‚úàÔ∏èÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ ') + str(pressure) + ' ' + _(pressure_dict[units]) + '\n' + \
                     _('üí® –í–µ—Ç–µ—Ä ') + str(wind_speed) + ' ' + _(speed_dict[units]) + ', ' + wind_direction + '\n\n'

        return result

    except Exception as ex:
        print(ex)
        result = _('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!')
    finally:
        return result
